"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.container = void 0;
require("reflect-metadata");
const inversify_1 = require("inversify");
const user_controller_1 = require("../controllers/user-controller");
const group_dal_1 = require("../data-access/group-dal");
const group_data_mapper_1 = require("../data-access/group-data-mapper");
const user_dal_1 = require("../data-access/user-dal");
const user_data_mapper_1 = require("../data-access/user-data-mapper");
const router_config_1 = __importDefault(require("../routers/router-config"));
const user_router_1 = __importDefault(require("../routers/user.router"));
const users_service_1 = require("../services/users.service");
const group_controller_1 = require("./../controllers/group-controller");
const group_router_1 = require("./../routers/group.router");
const group_service_1 = require("./../services/group.service");
const inversify_types_1 = require("./inversify.types");
const container = new inversify_1.Container();
exports.container = container;
container.bind(inversify_types_1.TYPES.GroupService).to(group_service_1.GroupService);
container.bind(inversify_types_1.TYPES.UserService).to(users_service_1.UserService);
container.bind(inversify_types_1.TYPES.GroupController).to(group_controller_1.GroupController);
container.bind(inversify_types_1.TYPES.UserController).to(user_controller_1.UserController);
container.bind(inversify_types_1.TYPES.GroupDal).to(group_dal_1.GroupDal);
container.bind(inversify_types_1.TYPES.UserDal).to(user_dal_1.UserDal);
container.bind(inversify_types_1.TYPES.GroupMapper).to(group_data_mapper_1.GroupDataMapper);
container.bind(inversify_types_1.TYPES.UserMapper).to(user_data_mapper_1.UserDataMapper);
container.bind(inversify_types_1.TYPES.UserRouter).to(user_router_1.default);
container.bind(inversify_types_1.TYPES.GroupRouter).to(group_router_1.GroupRouter);
container.bind(inversify_types_1.TYPES.RouterConfig).to(router_config_1.default);
